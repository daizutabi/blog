<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>大豆旅 - daizutabi</title><link>https://blog.daizutabi.net/</link><description></description><lastBuildDate>Tue, 02 Apr 2019 00:00:00 +0900</lastBuildDate><item><title>Fluent Python 第18章</title><link>https://blog.daizutabi.net/2019/04/02/</link><description>
&lt;p&gt;Fluent Python 18章 asyncioによる並行処理を Python 3.7で実装します。 &lt;a href="https://github.com/fluentpython/example-code"&gt;公式のHP&lt;/a&gt;にもPython 3.7用のアップデートがあります。&lt;/p&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1&lt;/span&gt; &lt;span class="title"&gt;スレッドとコルーチン&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;以下の例では、Jupyter clientで実行できるように、&lt;a href="https://github.com/erdewit/nest_asyncio"&gt;nest_asyncio&lt;/a&gt;パッケージを使っています。&lt;/p&gt;
&lt;div class="pheasant-header"&gt;&lt;div class="other"&gt;&lt;p class="caption"&gt;&lt;span class="prefix"&gt;例&lt;/span&gt; &lt;span class="number"&gt;18.2&lt;/span&gt;
&lt;/p&gt;
&lt;div class="content"&gt;
&lt;div class="pheasant-fenced-code"&gt;&lt;div class="input"&gt;&lt;pre&gt;&lt;code class="python"&gt;import asyncio
import itertools
import sys

import nest_asyncio

nest_asyncio.apply()


async def spin():
    for char in itertools.cycle(&amp;#34;|/-\\&amp;#34;):
        sys.stdout.write(char)
        sys.stdout.flush()
        try:
            await asyncio.sleep …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Tue, 02 Apr 2019 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2019-04-02:/2019/04/02/</guid></item><item><title>Fluent Python 第17章</title><link>https://blog.daizutabi.net/2019/04/01/</link><description>
&lt;p&gt;「Fluent Python 17章 futuresを使った並行処理」の前半部分をPython 3.7で実装します。 &lt;a href="https://github.com/fluentpython/example-code"&gt;公式のHP&lt;/a&gt;にもPython 3.7用のアップデートがあります。&lt;/p&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1&lt;/span&gt; &lt;span class="title"&gt;共通項目&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;div class="pheasant-header"&gt;&lt;div class="other"&gt;&lt;p class="caption"&gt;&lt;span class="prefix"&gt;例&lt;/span&gt; &lt;span class="number"&gt;17.1&lt;/span&gt;
&lt;span class="title"&gt;共通項目&lt;/span&gt;&lt;/p&gt;
&lt;div class="content"&gt;
&lt;div class="pheasant-fenced-code"&gt;&lt;div class="input"&gt;&lt;pre&gt;&lt;code class="python"&gt;import asyncio
import sys
import time
from concurrent import futures

import aiohttp
import nest_asyncio
import requests

nest_asyncio.apply()

POP20_CC = (&amp;#34;CN IN US ID BR PK NG BD RU JP MX PH VN ET …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Mon, 01 Apr 2019 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2019-04-01:/2019/04/01/</guid></item><item><title>AtomにおけるPython開発環境構築 その2</title><link>https://blog.daizutabi.net/2019/02/15/</link><description>
&lt;p&gt;AtomテキストエディタにPython開発環境を構築します。細かい設定を丁寧に説明し、快適な開発環境を整備することを目指します。&lt;/p&gt;
&lt;p&gt;それでは，Python開発に役立つパッケージを紹介していきます．各節のヘッダがパッケージ名になっているので，特に記載のない限り，その名前でパッケージを検索してインストールしてください．その後，Settings，Keymap，Stylesheetの各項目を必要に応じて設定していきます．&lt;/p&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1&lt;/span&gt; &lt;span class="title"&gt;platformio-ide-terminal&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Atom内でターミナルを実行します．&lt;/p&gt;
&lt;h3&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1.1&lt;/span&gt; &lt;span class="title"&gt;Settings&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Auto Run Command: C:\Users\daizu\Miniconda3\Scripts\activate.bat base&lt;/li&gt;
&lt;li&gt;Shell Override: C:\Windows\System32\cmd.exe&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;2&lt;/span&gt; &lt;span class="title"&gt;vim-mode-plus, ex-mode, vim-mode-plus-keymaps-for-surround, cursor-history, quick-highlight&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;AtomでVimキーバインドを実現します。&lt;/p&gt;
&lt;h3&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;2.1&lt;/span&gt; &lt;span class="title"&gt;Settings&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;vim-mode-plusで、以下のキーマップを有効にします．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;: 'yank-to-last-character-of-line' …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Fri, 15 Feb 2019 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2019-02-15:/2019/02/15/</guid></item><item><title>機械学習の準備 その2</title><link>https://blog.daizutabi.net/2019/01/20/</link><description>
&lt;p&gt;&lt;a href="../../../2018/09/03/"&gt;2018/9/3の記事&lt;/a&gt;のアップデート版です．今回は，ソニー製&lt;a href="https://nnabla.org/ja/"&gt;Neural Network Libraries&lt;/a&gt;もインストールし，今後両者を比較する準備とします．&lt;/p&gt;
&lt;p&gt;今回インストールする主なPythonパッケージは，以下の通りです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TensorFlow (GPU) 1.12.0&lt;/li&gt;
&lt;li&gt;Keras 2.2.4&lt;/li&gt;
&lt;li&gt;Neural Network Libraries 1.0.10&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストールするPC環境は以下の通りです：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: Windows 10 Pro (64-bit)&lt;/li&gt;
&lt;li&gt;CPU: Intel Core i7-7700HQ @ 2.80 GHz&lt;/li&gt;
&lt;li&gt;GPU: NVIDIA GeForce GTX 1050&lt;/li&gt;
&lt;li&gt;RAM: 16 GB&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1 …&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Sun, 20 Jan 2019 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2019-01-20:/2019/01/20/</guid></item><item><title>Happy Hacking Keyboardの設定 その2</title><link>https://blog.daizutabi.net/2018/09/04/</link><description>
&lt;p&gt;&lt;a href="../../../2018/02/11/"&gt;2018/2/11の記事&lt;/a&gt;では，Happy Hacking Keybordの設定を行いました．その時には，右Altキーを［全角／半角］キー，すなわち，全角と半角のトグルキーとして設定しました．今回は，以下の参照記事をもとに，右Altキーを全角，左Altキーを半角に設定します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://blog.k-san.info/hhkb-key-mapping"&gt;HHKB英語配列にしたらキー配列設定に試行錯誤した話。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.karakaram.com/alt-ime-on-off"&gt;WindowsのAlt空打ちで日本語入力(IME)を切り替えるツールを作った&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;まずは，右Altキーを［全角／半角］キーした設定をもとに戻します．次の記事を参照しました．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.atmarkit.co.jp/ait/articles/0001/26/news001.html"&gt;Windowsで右Altキーに［漢字］キーを割り当てる方法（AXキーボード設定を利用する方法）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://evacore.info/hardware-hhkb-alt/"&gt;【HHKB】英語キーボードの右Altキーに［全角／半角］キーを割り当てる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;［スタート］ボタンを右クリックして［ファイルを指定して実行］を選択し，「regedit」と入力して，レジストリエディタを起動します.&lt;/p&gt;
&lt;p&gt;左ペインから，【HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\Services\i8042prt …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Tue, 04 Sep 2018 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2018-09-04:/2018/09/04/</guid></item><item><title>Condaを使ってGPU板TensorFlowを簡単にインストール</title><link>https://blog.daizutabi.net/2018/09/03/</link><description>
&lt;p&gt;&lt;a href="../../../2018/09/01/"&gt;2018/9/1の記事&lt;/a&gt;では，CUDA Toolkitなどをインストールした上で，pip経由でTensorFlowおよびKerasをインストールしました．実は，Condaを使うと，CUDAを手動でインストールする必要がなくなります．実際に検証してみました．&lt;/p&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1&lt;/span&gt; &lt;span class="title"&gt;準備&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;まず，コントロールパネルのプログラムのアンインストールで，CUDA関連のアプリを全て消去します．再起動後に，以下を実行してみます．&lt;/p&gt;
&lt;div class="pheasant-fenced-code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;code class="bash"&gt;(base) &amp;gt; activate ml
(ml) &amp;gt; python mnist_cnn.py
(中略)
ImportError: Could not find &amp;#39;cudart64_90.dll&amp;#39;. TensorFlow requires that this DLL be installed in a directory that is named in your %PATH% environment variable …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Mon, 03 Sep 2018 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2018-09-03:/2018/09/03/</guid></item><item><title>機械学習の準備</title><link>https://blog.daizutabi.net/2018/09/01/</link><description>
&lt;p&gt;Pythonを使って機械学習の勉強をしていきます．今回は，scikit-learnとTensorFlowをインストールします．この記事では，必要なパッケージなどをインストールする方法を順を追って説明し，勉強を開始できる状態にします．今回インストールする主なPythonパッケージは，以下の通りです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JupyterLab 0.34.3&lt;/li&gt;
&lt;li&gt;scikit-learn 0.19.1&lt;/li&gt;
&lt;li&gt;TensorFlow (GPU) 1.10&lt;/li&gt;
&lt;li&gt;Keras 2.2.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GPUを使って計算するため，CUDA ToolkitおよびcuDNNもインストールします． これらは，使用するTensorFlowが対応しているバージョンをインストールする必要があります．特に何も指定しないと，最新版がインストールされて，TensorFlowパッケージが実行できないというケースがあるので注意が必要です．具体的には，以下のバージョンを使います：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CUDA Toolkit: Version 9.0.176&lt;/li&gt;
&lt;li&gt;cuDNN: Version 7.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストールするPC環境は以下の通りです：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: Windows 10 Pro …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Sat, 01 Sep 2018 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2018-09-01:/2018/09/01/</guid></item><item><title>AtomにおけるPython開発環境構築</title><link>https://blog.daizutabi.net/2018/08/31/</link><description>
&lt;p&gt;AtomテキストエディタにPython開発環境を構築します．細かい設定を丁寧に説明し，快適な開発環境を整備することを目指します．&lt;/p&gt;
&lt;p&gt;それでは，Python開発に役立つパッケージを紹介していきます．各節のヘッダがパッケージ名になっているので，特に記載のない限り，その名前でパッケージを検索してインストールしてください．その後，Settings，Keymap，Stylesheetの各項目を必要に応じて設定していきます．&lt;/p&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1&lt;/span&gt; &lt;span class="title"&gt;vim-mode-plus&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;AtomでVimキーバインドを実現します．このパッケージがなかったら，Atomを使っていないでしょう．&lt;/p&gt;
&lt;h3&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1.1&lt;/span&gt; &lt;span class="title"&gt;Settings&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;以下のキーマップを有効にします．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Y&lt;/code&gt;: 'yank-to-last-character-of-line'&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_&lt;/code&gt;: 'replace-with-register'&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c c&lt;/code&gt;: 'change inner-smart-word'&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt;: 'inner-any-pair' in 'operator-pending-mode'&lt;/li&gt;
&lt;li&gt;&lt;code&gt;;&lt;/code&gt;: 'inner-any-pair' in 'visual-mode'&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以下の設定を有効にします．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automatically Escape Insert Mode On Activate Pane Item Change&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1.2&lt;/span&gt; &lt;span class="title"&gt;Keymap&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;Markdownなどのファイルを編集するときには，ソフトラップを有効にするので …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Fri, 31 Aug 2018 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2018-08-31:/2018/08/31/</guid></item><item><title>Happy Hacking Keyboardの設定</title><link>https://blog.daizutabi.net/2018/02/11/</link><description>
&lt;p&gt;&lt;a href="https://www.pfu.fujitsu.com/hhkeyboard/type-s/"&gt;Happy Hacking Keyboard Professional2 Type-S&lt;/a&gt;英語配列モデルを購入しました．より快適に使うための設定をまとめておきます．&lt;/p&gt;
&lt;p&gt;以下の記事を参考にしました．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.shos.info/archives/2012/11/windows_8_pc.html"&gt;[Windows 8/10] 日本語キーボードのノートPCで外付け英語キーボードを使用する方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://evacore.info/hardware-hhkb-alt/"&gt;【HHKB】英語キーボードの右Altキーに［全角／半角］キーを割り当てる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1&lt;/span&gt; &lt;span class="title"&gt;背面スイッチ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;以下の設定にしています．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lite拡張モード（PC）: SW1 ON, SW2 OFF&lt;/li&gt;
&lt;li&gt;左◇ ⇒ Fn: SW4 ON&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;2&lt;/span&gt; &lt;span class="title"&gt;レジスタの設定&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;LayerDriver JPN: kbdax2.dll&lt;/li&gt;
&lt;li&gt;OverrideKeyboardIdentifier: AX_105KEY&lt;/li&gt;
&lt;li&gt;OverriedKeyboardSubtype: 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="png" src="https://blog.daizutabi.net/images/20180211/reg.png"&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;3&lt;/span&gt; &lt;span class="title"&gt;言語の追加&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;「英語(米国)」を追加しました．&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="https://blog.daizutabi.net/images/20180211/lang.png"&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;4&lt;/span&gt; &lt;span class="title"&gt;設定状況&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;以上の設定で以下のような動作になります．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;左◇キー …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Sun, 11 Feb 2018 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2018-02-11:/2018/02/11/</guid></item><item><title>ディープラーニング学習の準備</title><link>https://blog.daizutabi.net/2018/01/31/</link><description>
&lt;p&gt;Pythonを使ってディープラーニングの学習をしていきます．この記事では，必要なパッケージなどをインストールする方法を順を追って説明し，学習を開始できる状態にします．今回インストールする主なPythonパッケージは，以下の通りです．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Theano&lt;/li&gt;
&lt;li&gt;TensorFlow&lt;/li&gt;
&lt;li&gt;Keras&lt;/li&gt;
&lt;li&gt;Neural Network Libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GPUを使って計算するため，CUDA ToolkitおよびcuDNNもインストールします． これらは，使用するPythonパッケージが対応しているバージョンをインストールする必要があります．特に何も指定しないと，最新版がインストールされて，Pythonパッケージが実行できないというケースがあるので注意が必要です．具体的には，以下のバージョンを使います：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CUDA Toolkit: Version 8.0 GA2&lt;/li&gt;
&lt;li&gt;cuDNN: Version 6.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;インストールするPC環境は以下の通りです（PC新調に伴い2018/2/4に更新）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS: Windows 10 Home (64-bit)&lt;/li&gt;
&lt;li&gt;CPU: Intel Core i7-7700HQ @ 2.80 GHz&lt;/li&gt;
&lt;li&gt;GPU: NVIDIA …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Wed, 31 Jan 2018 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2018-01-31:/2018/01/31/</guid></item><item><title>Google Web Fontの設定</title><link>https://blog.daizutabi.net/2018/01/03/</link><description>
&lt;p&gt;&lt;a href="https://googlefonts.github.io/japanese/"&gt;Google Fonts + 日本語早期アクセス&lt;/a&gt;の設定を行います．今回は，さわらびゴシックを使ってみます．本ブログのPelicanテーマである&lt;a href="http://www.voidynullness.net/page/voidy-bootstrap-pelican-theme/"&gt;VoidyBootstrap&lt;/a&gt;での設定方法になります．&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;に以下を追加します．&lt;/p&gt;
&lt;div class="pheasant-fenced-code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;code class="markdown"&gt;THEME = &amp;#39;voidy-bootstrap/&amp;#39;
STYLESHEETS = (
    &amp;#39;custom/custom.css&amp;#39;,
    # other stylesheets
)

STYLESHEET_URLS = (
    &amp;#39;https://fonts.googleapis.com/earlyaccess/sawarabigothic.css&amp;#39;,
    # other stylesheet_urls
)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;voidy-bootstrap&lt;/code&gt;ディレクトリ下に&lt;code&gt;static/css/custom.css&lt;/code&gt;を作成し，以下を追加します．&lt;/p&gt;
&lt;div class="pheasant-fenced-code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;code class="css"&gt;body {
  font-family: &amp;#39;Sawarabi Gothic&amp;#39;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;簡単に設定できました．&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Wed, 03 Jan 2018 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2018-01-03:/2018/01/03/</guid></item><item><title>DNS Zonesからネームサーバーを設定する方法</title><link>https://blog.daizutabi.net/2017/12/21/</link><description>
&lt;p&gt;&lt;a href="https://blog.daizutabi.net/2017/12/20/"&gt;2017/12/20&lt;/a&gt;に，ブログの公開を&lt;a href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;から&lt;a href="https://www.netlify.com"&gt;Netlify&lt;/a&gt;に移行した件を書きました．ただ，その時の方法だと，最初にアップしたサイトが特権的な扱いを受けて，後続のサイトと非対称な形になってしまいました．少し気になっていたところ，DNS zonesから再設定することで，非対称性を解消できました．&lt;/p&gt;
&lt;p&gt;以下，順を追って説明したいと思います．次の前提で話を進めます．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;カスタムドメインとサイトをすでに登録していたので，すべて削除しました．&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.onamae.com"&gt;お名前.com&lt;/a&gt;で&lt;code&gt;daizutabi.net&lt;/code&gt;を取得済です．&lt;/li&gt;
&lt;li&gt;GitHub上の&lt;a href="https://github.com/daizutabi/blog"&gt;「ブログ」&lt;/a&gt;レポジトリと&lt;a href="https://github.com/daizutabi/iroha"&gt;「Pythonパッケージの作り方」&lt;/a&gt;レポジトリを公開していきます．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（注）具体的な名前で説明したほうが分かりやすいと思いそのまま書いています．ドメイン名やレポジトリ名は適宜置き換えを行ってください．&lt;/p&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1&lt;/span&gt; &lt;span class="title"&gt;DNS zonesの設定&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.netlify.com"&gt;Netlify&lt;/a&gt;にGitHubアカウントを使ってログインします．&lt;/p&gt;
&lt;p&gt;&lt;img alt="daizutabi" src="https://blog.daizutabi.net/images/20171221/010.png"&gt;&lt;/p&gt;
&lt;p&gt;左上のAll teamsからdaizutabiを選択します．&lt;/p&gt;
&lt;p&gt;&lt;img alt="DNS zones" src="https://blog.daizutabi.net/images/20171221/020.png"&gt;&lt;/p&gt;
&lt;p&gt;メニューからDNS zonesをクリックします．&lt;/p&gt;
&lt;p&gt;&lt;img alt="Add a domain" src="https://blog.daizutabi.net/images/20171221/030.png"&gt;&lt;/p&gt;
&lt;p&gt;Add a domainをクリックします．&lt;/p&gt;
&lt;p&gt;&lt;img alt="Create DNS zone" src="https://blog.daizutabi.net/images/20171221/040.png"&gt;&lt;/p&gt;
&lt;p&gt;Domainにdaizutabi …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Thu, 21 Dec 2017 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2017-12-21:/2017/12/21/</guid></item><item><title>NetlifyでPelicanページを公開する</title><link>https://blog.daizutabi.net/2017/12/20/</link><description>
&lt;p&gt;これまで&lt;a href="https://pages.github.com"&gt;GitHub Pages&lt;/a&gt;をブログなどの公開に使っていましたが，&lt;a href="https://www.netlify.com"&gt;Netlify&lt;/a&gt;に移行します．とても簡単に独自ドメインを使うことができます．&lt;/p&gt;
&lt;p&gt;（追記）以下の内容よりも，2017/12/21の&lt;a href="https://blog.daizutabi.net/2017/12/21/"&gt;「DNS Zonesからネームサーバーを設定する方法」&lt;/a&gt;のほうがお勧めです．&lt;/p&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;1&lt;/span&gt; &lt;span class="title"&gt;お名前.comで独自ドメインの取得&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.onamae.com"&gt;お名前.com&lt;/a&gt;で独自ドメインを取得します．金額に関しては，初年度だけでなく２年目以降の金額についてもチェックしておきましょう．また，「1.お申込み内容」のところで，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Whois情報公開代行（新規登録と同時なら無料）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;は，個人情報を公開したくない場合にはチェックを入れておきます．&lt;/p&gt;
&lt;p&gt;お名前.comのサイト内ですることは，取得したドメインのネームサーバをNetlify DNSに設定することだけです．それ以外の設定はすべて，Netlify内で完結します．&lt;/p&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;2&lt;/span&gt; &lt;span class="title"&gt;静的サイトの作成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Pelicanを使ってサイトを作成し，GitHubレポジトリにPushしておきます．&lt;/p&gt;
&lt;h2&gt;&lt;span class="pheasant-header"&gt;&lt;span class="header"&gt;&lt;span class="number"&gt;3&lt;/span&gt; &lt;span class="title"&gt;Netifyでサイトの作成&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.netlify.com"&gt;Netlify&lt;/a&gt;にはGitHubアカウントを使ってログインします．ログイン後に，&lt;a href="https://app.netlify.com/"&gt;https://app.netlify.com …&lt;/a&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Wed, 20 Dec 2017 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2017-12-20:/2017/12/20/</guid></item><item><title>Gravater画像を貼り付ける</title><link>https://blog.daizutabi.net/2017/12/19/</link><description>
&lt;p&gt;ブログサイトの右上のほうに&lt;a href="https://ja.gravatar.com"&gt;Gravater&lt;/a&gt;の画像を表示させてみます．画像の取得方法は&lt;a href="https://ja.gravatar.com/site/implement/images/"&gt;Image Requests&lt;/a&gt;や&lt;a href="https://ja.gravatar.com/site/implement/images/python/"&gt;Python Image Requests&lt;/a&gt;に記載されています．&lt;/p&gt;
&lt;p&gt;Gravaterに登録したアドレスからハッシュ値を生成します．&lt;/p&gt;
&lt;div class="pheasant-fenced-code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;code class="python"&gt;import hashlib
hashlib.md5(b&amp;#39;daizutabi@gmail.com&amp;#39;).hexdigest()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ハッシュ値を使って，画像を読み込みます．&lt;/p&gt;
&lt;div class="pheasant-fenced-code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;img src=&amp;#34;https://www.gravatar.com/avatar/425bf792666d158202306d5dc73367d0&amp;#34;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;実際の表示は以下の通りです．&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.gravatar.com/avatar/425bf792666d158202306d5dc73367d0"/&gt;&lt;/p&gt;
&lt;p&gt;画像サイズを変えてみます．&lt;/p&gt;
&lt;div class="pheasant-fenced-code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;code class="html"&gt;&amp;lt;img src=&amp;#34;https://www.gravatar.com/avatar/425bf792666d158202306d5dc73367d0?s=200&amp;#34;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src="https://www.gravatar.com/avatar/425bf792666d158202306d5dc73367d0?s=200"/&gt;&lt;/p&gt;
&lt;p&gt;ここまで出来たら，CSSを編集して完成です．&lt;/p&gt;
&lt;div class="pheasant-fenced-code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;code class="css"&gt;.jumbotron h1 {
  padding-top: 15px;
  padding-bottom …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Tue, 19 Dec 2017 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2017-12-19:/2017/12/19/</guid></item><item><title>Pythonパッケージの作り方</title><link>https://blog.daizutabi.net/2017/12/18/</link><description>
&lt;p&gt;&lt;a href="https://github.com/daizutabi/takuhai"&gt;Takuhai&lt;/a&gt;を作成するにあたってPythonパッケージの作り方について学びました．&lt;a href="https://iroha.daizutabi.net/"&gt;「Pythonパッケージの作り方」&lt;/a&gt;に公開しています．パッケージを作るたびに&lt;code&gt;PYTHONPATH&lt;/code&gt;を設定していたり，&lt;code&gt;setup.py&lt;/code&gt;を作るのが敷居が高いなと思っている方の参考になれば幸いです．&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Mon, 18 Dec 2017 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2017-12-18:/2017/12/18/</guid></item><item><title>記事の自動ビルドとページのリロード</title><link>https://blog.daizutabi.net/2017/12/17/</link><description>
&lt;p&gt;&lt;a href="https://github.com/daizutabi/takuhai"&gt;Takuhai&lt;/a&gt;パッケージを作りました．Pelicanプロジェクト内の記事ファイルが更新されたら次のことを実行します：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;記事をビルドしてHTMLファイルを生成します．&lt;/li&gt;
&lt;li&gt;ローカルのHTTPサーバを立ち上げて，生成した記事をブラウザで表示します．&lt;/li&gt;
&lt;li&gt;記事が更新されたら，その都度ビルドして，ブラウザのページを自動でリロードします．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本パッケージを作成するにあたって，次の記事を参考にしました：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://merlijn.vandeen.nl/2015/pelican-livereload.html"&gt;Using LiveReload with Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://tech.agilitynerd.com/livereload-with-pelican.html"&gt;LiveReload with Pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらの記事が提供する機能に加えて，Takuhaiでは以下の改善を加えています：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org"&gt;PyPI&lt;/a&gt;および&lt;a href="https://anaconda.org"&gt;Anaconda Cloud&lt;/a&gt;からのインストール．&lt;/li&gt;
&lt;li&gt;実行コマンド&lt;code&gt;takuhai&lt;/code&gt;の実装．&lt;/li&gt;
&lt;li&gt;ホスト名やポート番号の指定．&lt;/li&gt;
&lt;li&gt;ブラウザの自動起動．&lt;/li&gt;
&lt;li&gt;相対URLと絶対URLの選択．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に有用と考えている「相対URLと絶対URLの選択」について説明します．Takuhaiの実行コマンド&lt;code&gt;takuhai&lt;/code&gt;はデフォルトで相対URLを設定します．これは&lt;code&gt;pelicanconf.py&lt;/code&gt;の設定を上書きします．&lt;/p&gt;
&lt;p&gt;Pelicanドキュメントの&lt;a href="http://docs.getpelican.com/en/stable/settings.html#url-settings"&gt;URL settings&lt;/a&gt;によれば，絶対URLが望ましい選択とされています．しかし，これではローカルHTTPサーバを立ち上げても，リンク先が外部サイトになってしまいます．望ましい動作とは言えないでしょう …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Sun, 17 Dec 2017 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2017-12-17:/2017/12/17/</guid></item><item><title>ブログを始める</title><link>https://blog.daizutabi.net/2017/12/16/</link><description>
&lt;p&gt;&lt;a href="https://pages.github.com/"&gt;GitHub Pages&lt;/a&gt;でブログを始めることにしました．&lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;を使って記事を生成します．フォーマットはマークダウンにします．&lt;/p&gt;
&lt;p&gt;Pelicanでは，各記事のファイルの先頭に以下のようなメタデータを書く必要があります．&lt;/p&gt;
&lt;div class="pheasant-fenced-code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;code class="text"&gt;Title: My First Review
Date: 2010-12-03 10:20
Category: Review
Slug: URL&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;記事を書くたびにこれらのメタデータを入力するのは少々面倒です．そこで，ファイル名から自動的にメタデータを抽出するようにします．設定ファイル&lt;code&gt;pelicanconf.py&lt;/code&gt;に以下の内容を追加します．&lt;/p&gt;
&lt;div class="pheasant-fenced-code"&gt;&lt;div class="source"&gt;&lt;pre&gt;&lt;code class="markdown"&gt;PATH_METADATA = r&amp;#39;(?P&amp;lt;category&amp;gt;.+?)/.*&amp;#39;
FILENAME_METADATA = r&amp;#39;(?P&amp;lt;date&amp;gt;\d{8}).(?P&amp;lt;title&amp;gt;.+)&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;以下のようなルールで記事ファイルを&lt;code&gt;content&lt;/code&gt;ディレクトリに配置します．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt;ディレクトリ直下に置かれたディレクトリの名前がカテゴリー名になります．&lt;/li&gt;
&lt;li&gt;その下のディレクトリから各記事ファイルに至るまでは任意のディレクトリ構造をとることができます．&lt;/li&gt;
&lt;li&gt;記事ファイルの名前は&lt;code&gt;&amp;lt;YYYYMMDD&amp;gt;&amp;lt;sep&amp;gt;&amp;lt;title&amp;gt;.md …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">daizutabi</dc:creator><pubDate>Sat, 16 Dec 2017 00:00:00 +0900</pubDate><guid isPermaLink="false">tag:blog.daizutabi.net,2017-12-16:/2017/12/16/</guid></item></channel></rss>